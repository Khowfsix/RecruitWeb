// <auto-generated />
using System;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(RecruitmentWebContext))]
    [Migration("20240702091222_add_interview_type")]
    partial class add_interview_type
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Candidate_Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int?>("Company_Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Cvid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cvid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId")
                        .HasName("PK__Applicat__C93A4C99D502D0BD");

                    b.HasIndex("Cvid");

                    b.HasIndex("PositionId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Award", b =>
                {
                    b.Property<Guid>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwardOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 2, 16, 12, 21, 855, DateTimeKind.Local).AddTicks(7372));

                    b.HasKey("AwardId")
                        .HasName("PK_award");

                    b.HasIndex("CandidateId");

                    b.ToTable("Award", (string)null);
                });

            modelBuilder.Entity("Data.Entities.BlackList", b =>
                {
                    b.Property<Guid>("BlackListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("BlackListId")
                        .HasName("PK__BlackLis__B54E3C741F66E917");

                    b.HasIndex("CandidateId");

                    b.ToTable("BlackList", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Candidate", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CandidateId")
                        .HasName("PK__Candidat__DF539B9C8196430E");

                    b.HasIndex("UserId");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CandidateHasSkill", b =>
                {
                    b.Property<Guid>("CandidateHasSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateHasSkillId")
                        .HasName("PK_candidateHasSkill");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateHasSkill", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CandidateJoinEvent", b =>
                {
                    b.Property<Guid>("CandidateJoinEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateJoinEventId")
                        .HasName("PK__Candidat__ECDC0AF2269C389E");

                    b.HasIndex("EventId");

                    b.HasIndex(new[] { "CandidateId", "EventId" }, "UQ__Candidat__0FAC84DD20A583A2")
                        .IsUnique();

                    b.ToTable("CandidateJoinEvent", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CategoryPosition", b =>
                {
                    b.Property<Guid>("CategoryPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryPositionDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryPositionName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryPositionId")
                        .HasName("PK_categoryPostion");

                    b.ToTable("CategoryPosition", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CategoryQuestion", b =>
                {
                    b.Property<Guid>("CategoryQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryQuestionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("CategoryQuestionId")
                        .HasName("PK__Category__DE130A6A56DA0675");

                    b.ToTable("CategoryQuestion", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CertificateURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 2, 16, 12, 21, 846, DateTimeKind.Local).AddTicks(6683));

                    b.HasKey("CertificateId")
                        .HasName("PK__Certific__BBF8A7C122402FA9");

                    b.HasIndex("CandidateId");

                    b.ToTable("Certificate", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CompanyId")
                        .HasName("PK__Departme__B2079BED26482F76");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Cv", b =>
                {
                    b.Property<Guid>("Cvid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cvid");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CvName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CvPdf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CvPdf");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isDeleted");

                    b.HasKey("Cvid")
                        .HasName("PK__CV__A04CFFA37AEDF099");

                    b.HasIndex("CandidateId");

                    b.ToTable("CV", (string)null);
                });

            modelBuilder.Entity("Data.Entities.CvHasSkill", b =>
                {
                    b.Property<Guid>("CvSkillsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CV_SkillsId");

                    b.Property<Guid>("Cvid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cvid");

                    b.Property<int?>("ExperienceYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CvSkillsId")
                        .HasName("PK__CV_has_S__21EE6FE772D382E5");

                    b.HasIndex("Cvid");

                    b.HasIndex("SkillId");

                    b.ToTable("CV_has_Skills", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Education", b =>
                {
                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CandidateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 2, 16, 12, 21, 854, DateTimeKind.Local).AddTicks(9727));

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("EducationId")
                        .HasName("PK_education");

                    b.HasIndex("CandidateId");

                    b.ToTable("Education", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId")
                        .HasName("PK__Event__7944C8101630C102");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Data.Entities.EventHasPosition", b =>
                {
                    b.Property<Guid>("EventHasPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventHasPositionId")
                        .HasName("PK__EventHasPosition__7944C8101630D001");

                    b.HasIndex("EventId");

                    b.HasIndex("PositionId");

                    b.ToTable("EventHasPositions", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Interview", b =>
                {
                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressOrStartURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Candidate_Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int?>("Company_Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("DetailLocationOrJoinURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int");

                    b.Property<Guid>("InterviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("InterviewId")
                        .HasName("PK__Intervie__C97C58525A846D87");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Interview", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Interviewer", b =>
                {
                    b.Property<Guid>("InterviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InterviewerId")
                        .HasName("PK__Intervie__C29BDA1D949A214A");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Interviewer", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B93855AB02B6E2A3");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Level", b =>
                {
                    b.Property<Guid>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelId")
                        .HasName("PK_level");

                    b.ToTable("Level", (string)null);
                });

            modelBuilder.Entity("Data.Entities.PersonalProject", b =>
                {
                    b.Property<Guid>("PersonalProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("From")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 2, 16, 12, 21, 855, DateTimeKind.Local).AddTicks(5572));

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonalProjectId")
                        .HasName("PK_personalProject");

                    b.HasIndex("CandidateId");

                    b.ToTable("PersonalProject", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxHiringQty")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("MinSalary")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("PositionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PositionId")
                        .HasName("PK__Position__60BB9A79BADAC7AE");

                    b.HasIndex("CategoryPositionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06FAC07D9C6DD");

                    b.HasIndex("CategoryQuestionId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Data.Entities.QuestionLanguage", b =>
                {
                    b.Property<Guid>("QuestionLanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionLanguageId")
                        .HasName("PK_QuestionLanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "QuestionId", "LanguageId" }, "UQ__Question_LanguageId")
                        .IsUnique();

                    b.ToTable("QuestionLanguages");
                });

            modelBuilder.Entity("Data.Entities.QuestionSkill", b =>
                {
                    b.Property<Guid>("QuestionSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionSkillsId")
                        .HasName("PK__Question__3D7C86CBF36F4D5D");

                    b.HasIndex("SkillId");

                    b.HasIndex(new[] { "QuestionId", "SkillId" }, "UQ__Question__603A66B596184E51")
                        .IsUnique();

                    b.ToTable("QuestionSkills");
                });

            modelBuilder.Entity("Data.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecruiterId")
                        .HasName("PK__Recruite__219CFF5625FB1B60");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Recruiter", (string)null);
                });

            modelBuilder.Entity("Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_refreshToken");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__D5BD48055F400A51");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Requirement", b =>
                {
                    b.Property<Guid>("RequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequirementId")
                        .HasName("PK__Requirem__7DF11E5D19F31719");

                    b.HasIndex("PositionId");

                    b.HasIndex("SkillId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Data.Entities.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPasswords");
                });

            modelBuilder.Entity("Data.Entities.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.HasKey("RoundId")
                        .HasName("PK__Round__94D84DFA949E251F");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Round", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SecurityAnswer", b =>
                {
                    b.Property<Guid>("SecurityAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SecurityQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SecurityAnswerId")
                        .HasName("PK__SecurityAnswer__C0A83881EF08EB13");

                    b.HasIndex("SecurityQuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("SecurityAnswer", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SecurityQuestion", b =>
                {
                    b.Property<Guid>("SecurityQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SecurityQuestionId")
                        .HasName("PK__SecurityQuestion__C0A83881EF08EB13");

                    b.ToTable("SecurityQuestion", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isDeleted");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SkillId")
                        .HasName("PK__Skill__DFA0918741CB17C8");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SuccessfulCadidate", b =>
                {
                    b.Property<Guid>("SuccessfulCadidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuccessfulCadidateId")
                        .HasName("PK__Successf__0743315651E595B0");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PositionId");

                    b.ToTable("SuccessfulCadidate", (string)null);
                });

            modelBuilder.Entity("Data.Entities.WebUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3e3e62af-1c17-4fd4-a792-f9d11494629a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d00d37a8-0c8d-4b37-a8b7-823901b3b98d",
                            Email = "lyhongphat261202@gmail.com",
                            EmailConfirmed = true,
                            FullName = "ly hong phat",
                            LockoutEnabled = true,
                            NormalizedEmail = "LYHONGPHAT261202@GMAIL.COM",
                            NormalizedUserName = "LYHONGPHAT",
                            PasswordHash = "AQAAAAEAACcQAAAAED/UcvE0mbg31jAMWDqc7wtANLZ9+xQrwe4GvRoEW7VHQ4mGKsXvvhv9J367awYVfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQBJBUONTUAPYIE7UZDHYJD2NE7VJZEF",
                            TwoFactorEnabled = false,
                            UserName = "lyhongphat"
                        },
                        new
                        {
                            Id = "17fc0f8b-a04c-41c6-ac7e-10eed593ec8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37a3f448-08e1-4d5b-8d9d-97edd7ed2441",
                            Email = "jasmineandhongphat@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jasmine",
                            LockoutEnabled = true,
                            NormalizedEmail = "JASMINEANDHONGPHAT@GMAIL.COM",
                            NormalizedUserName = "ADMINJASMINE",
                            PasswordHash = "AQAAAAEAACcQAAAAECIlpgtWCyAhui2Dipuu9aK3ICiIStVY9hgOJwdooCgjRvENgPXaHCtjyM43zqc1Bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KDB5T3VMZDHW3C2T2O3JFSP2TK4OQYRC",
                            TwoFactorEnabled = false,
                            UserName = "AdminJasmine"
                        });
                });

            modelBuilder.Entity("Data.Entities.WorkExperience", b =>
                {
                    b.Property<Guid>("WorkExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("From")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 2, 16, 12, 21, 855, DateTimeKind.Local).AddTicks(1524));

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkExperienceId")
                        .HasName("PK_workExperience");

                    b.HasIndex("CandidateId");

                    b.ToTable("WorkExperience", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d1aa601-ed0e-4e47-ba9b-41bdcedf6f43",
                            ConcurrencyStamp = "1",
                            Name = "Candidate",
                            NormalizedName = "Candidate"
                        },
                        new
                        {
                            Id = "e0dd2fe2-2548-4d09-b127-2bb651f0f448",
                            ConcurrencyStamp = "2",
                            Name = "Interviewer",
                            NormalizedName = "Interviewer"
                        },
                        new
                        {
                            Id = "e8c0a61f-3be4-47b2-98e3-72ec5dedd7d3",
                            ConcurrencyStamp = "3",
                            Name = "Recruiter",
                            NormalizedName = "Recruiter"
                        },
                        new
                        {
                            Id = "d6c13b9e-ac05-4da2-b906-7ffa8197b2d3",
                            ConcurrencyStamp = "4",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3e3e62af-1c17-4fd4-a792-f9d11494629a",
                            RoleId = "8d1aa601-ed0e-4e47-ba9b-41bdcedf6f43"
                        },
                        new
                        {
                            UserId = "3e3e62af-1c17-4fd4-a792-f9d11494629a",
                            RoleId = "e8c0a61f-3be4-47b2-98e3-72ec5dedd7d3"
                        },
                        new
                        {
                            UserId = "17fc0f8b-a04c-41c6-ac7e-10eed593ec8b",
                            RoleId = "d6c13b9e-ac05-4da2-b906-7ffa8197b2d3"
                        },
                        new
                        {
                            UserId = "17fc0f8b-a04c-41c6-ac7e-10eed593ec8b",
                            RoleId = "8d1aa601-ed0e-4e47-ba9b-41bdcedf6f43"
                        },
                        new
                        {
                            UserId = "17fc0f8b-a04c-41c6-ac7e-10eed593ec8b",
                            RoleId = "e0dd2fe2-2548-4d09-b127-2bb651f0f448"
                        },
                        new
                        {
                            UserId = "17fc0f8b-a04c-41c6-ac7e-10eed593ec8b",
                            RoleId = "e8c0a61f-3be4-47b2-98e3-72ec5dedd7d3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Application", b =>
                {
                    b.HasOne("Data.Entities.Cv", "Cv")
                        .WithMany("Applications")
                        .HasForeignKey("Cvid")
                        .IsRequired()
                        .HasConstraintName("Fk_appliCv");

                    b.HasOne("Data.Entities.Position", "Position")
                        .WithMany("Applications")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("Fk_appliPosition");

                    b.Navigation("Cv");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Data.Entities.Award", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("Awards")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_candidateHasAward");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.BlackList", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("BlackLists")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandiInBlackList");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.Candidate", b =>
                {
                    b.HasOne("Data.Entities.WebUser", "User")
                        .WithMany("Candidates")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.CandidateHasSkill", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("CandidateHasSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_candidateHasSkill_candidate");

                    b.HasOne("Data.Entities.Skill", "Skill")
                        .WithMany("CandidateHasSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_candidateHasSkill_skill");

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.CandidateJoinEvent", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("CandidateJoinEvents")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandiJoin");

                    b.HasOne("Data.Entities.Event", "Event")
                        .WithMany("CandidateJoinEvents")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_joinEvent");

                    b.Navigation("Candidate");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("Certificates")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_candidateHasCertificate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.Cv", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("Cvs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CreateCV");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.CvHasSkill", b =>
                {
                    b.HasOne("Data.Entities.Cv", "Cv")
                        .WithMany("CvHasSkills")
                        .HasForeignKey("Cvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Skill", "Skill")
                        .WithMany("CvHasSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_hasSkill");

                    b.Navigation("Cv");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.Education", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("Educations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CandidateHasEducations");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.HasOne("Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Events")
                        .HasForeignKey("RecruiterId")
                        .IsRequired()
                        .HasConstraintName("FK_EventManagedBy");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Data.Entities.EventHasPosition", b =>
                {
                    b.HasOne("Data.Entities.Event", "Event")
                        .WithMany("EventHasPositions")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventHasPositions");

                    b.HasOne("Data.Entities.Position", "Position")
                        .WithMany("EventHasPositions")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_PositionJoinEvents");

                    b.Navigation("Event");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Data.Entities.Interview", b =>
                {
                    b.HasOne("Data.Entities.Application", "Application")
                        .WithMany("Interviews")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_applicationInterview");

                    b.HasOne("Data.Entities.Interviewer", "Interviewer")
                        .WithMany("Interviews")
                        .HasForeignKey("InterviewerId")
                        .IsRequired()
                        .HasConstraintName("FK_IsConductes");

                    b.HasOne("Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Interviews")
                        .HasForeignKey("RecruiterId")
                        .IsRequired()
                        .HasConstraintName("FK_ReccerCreateInterview");

                    b.Navigation("Application");

                    b.Navigation("Interviewer");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Data.Entities.Interviewer", b =>
                {
                    b.HasOne("Data.Entities.Company", "Company")
                        .WithMany("Interviewers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("Fk_interDepart");

                    b.HasOne("Data.Entities.WebUser", "User")
                        .WithMany("Interviewers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Fk_InterviewerUser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.PersonalProject", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("PersonalProjects")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_candidateHasPersonalProject");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Data.Entities.Position", b =>
                {
                    b.HasOne("Data.Entities.CategoryPosition", "CategoryPosition")
                        .WithMany("Positions")
                        .HasForeignKey("CategoryPositionId")
                        .IsRequired()
                        .HasConstraintName("FK__categoryOfPosition");

                    b.HasOne("Data.Entities.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Hires");

                    b.HasOne("Data.Entities.Language", "Language")
                        .WithMany("Positions")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("Fk_language");

                    b.HasOne("Data.Entities.Level", "Level")
                        .WithMany("Positions")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK_LevelPosition");

                    b.HasOne("Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Positions")
                        .HasForeignKey("RecruiterId")
                        .IsRequired()
                        .HasConstraintName("FK_ManagedBy");

                    b.Navigation("CategoryPosition");

                    b.Navigation("Company");

                    b.Navigation("Language");

                    b.Navigation("Level");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Data.Entities.Question", b =>
                {
                    b.HasOne("Data.Entities.CategoryQuestion", "CategoryQuestion")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryQuestionId")
                        .IsRequired()
                        .HasConstraintName("Fk_catQues");

                    b.Navigation("CategoryQuestion");
                });

            modelBuilder.Entity("Data.Entities.QuestionLanguage", b =>
                {
                    b.HasOne("Data.Entities.Language", "Language")
                        .WithMany("QuestionLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("Fk_QuesLanguage");

                    b.HasOne("Data.Entities.Question", "Question")
                        .WithMany("QuestionLanguages")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("Fk_LanguageQues");

                    b.Navigation("Language");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Data.Entities.QuestionSkill", b =>
                {
                    b.HasOne("Data.Entities.Question", "Question")
                        .WithMany("QuestionSkills")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("Fk_SkillQues");

                    b.HasOne("Data.Entities.Skill", "Skill")
                        .WithMany("QuestionSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("Fk_QuesSkill");

                    b.Navigation("Question");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.Recruiter", b =>
                {
                    b.HasOne("Data.Entities.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("Fk_reccerDepart");

                    b.HasOne("Data.Entities.WebUser", "User")
                        .WithMany("Recruiters")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ReccerUser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("Data.Entities.WebUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRefreshToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Report", b =>
                {
                    b.HasOne("Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Reports")
                        .HasForeignKey("RecruiterId")
                        .IsRequired()
                        .HasConstraintName("FK_ReccerCreateReport");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Data.Entities.Requirement", b =>
                {
                    b.HasOne("Data.Entities.Position", "Position")
                        .WithMany("Requirements")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_requePos");

                    b.HasOne("Data.Entities.Skill", "Skill")
                        .WithMany("Requirements")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_requeSkil");

                    b.Navigation("Position");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Data.Entities.Round", b =>
                {
                    b.HasOne("Data.Entities.Interview", "Interview")
                        .WithMany("Rounds")
                        .HasForeignKey("InterviewId")
                        .IsRequired()
                        .HasConstraintName("Fk_RoundInterview");

                    b.HasOne("Data.Entities.Question", "Question")
                        .WithMany("Rounds")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("Fk_RoundQuestion");

                    b.Navigation("Interview");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Data.Entities.SecurityAnswer", b =>
                {
                    b.HasOne("Data.Entities.SecurityQuestion", "SecurityQuestion")
                        .WithMany("SecurityAnswers")
                        .HasForeignKey("SecurityQuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerForQues");

                    b.HasOne("Data.Entities.WebUser", "WebUser")
                        .WithMany("SecurityAnswers")
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerForUser");

                    b.Navigation("SecurityQuestion");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("Data.Entities.SuccessfulCadidate", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("SuccessfulCadidates")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_SuccessfulCandi");

                    b.HasOne("Data.Entities.Position", "Position")
                        .WithMany("SuccessfulCadidates")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_SuccessfulPosition");

                    b.Navigation("Candidate");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Data.Entities.WorkExperience", b =>
                {
                    b.HasOne("Data.Entities.Candidate", "Candidate")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CandidateHasWorkExperience");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.WebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.WebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.WebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.WebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Application", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Data.Entities.Candidate", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("BlackLists");

                    b.Navigation("CandidateHasSkills");

                    b.Navigation("CandidateJoinEvents");

                    b.Navigation("Certificates");

                    b.Navigation("Cvs");

                    b.Navigation("Educations");

                    b.Navigation("PersonalProjects");

                    b.Navigation("SuccessfulCadidates");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Data.Entities.CategoryPosition", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Data.Entities.CategoryQuestion", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Data.Entities.Company", b =>
                {
                    b.Navigation("Interviewers");

                    b.Navigation("Positions");

                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("Data.Entities.Cv", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CvHasSkills");
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.Navigation("CandidateJoinEvents");

                    b.Navigation("EventHasPositions");
                });

            modelBuilder.Entity("Data.Entities.Interview", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Data.Entities.Interviewer", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Data.Entities.Language", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("QuestionLanguages");
                });

            modelBuilder.Entity("Data.Entities.Level", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Data.Entities.Position", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EventHasPositions");

                    b.Navigation("Requirements");

                    b.Navigation("SuccessfulCadidates");
                });

            modelBuilder.Entity("Data.Entities.Question", b =>
                {
                    b.Navigation("QuestionLanguages");

                    b.Navigation("QuestionSkills");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Data.Entities.Recruiter", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Interviews");

                    b.Navigation("Positions");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Data.Entities.SecurityQuestion", b =>
                {
                    b.Navigation("SecurityAnswers");
                });

            modelBuilder.Entity("Data.Entities.Skill", b =>
                {
                    b.Navigation("CandidateHasSkills");

                    b.Navigation("CvHasSkills");

                    b.Navigation("QuestionSkills");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Data.Entities.WebUser", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Interviewers");

                    b.Navigation("Recruiters");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SecurityAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
